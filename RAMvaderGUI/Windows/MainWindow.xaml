<!-- 
  - Copyright (C) 2014 Vinicius Rogério Araujo Silva                         -
  -                                                                          -
  - This file is part of RAMvader.                                           -
  -                                                                          -
  - RAMvader is free software: you can redistribute it and/or modify         -
  - it under the terms of the GNU General Public License as published by     -
  - the Free Software Foundation, either version 3 of the License, or        -
  - (at your option) any later version.                                      -
  -                                                                          -
  - RAMvader is distributed in the hope that it will be useful,              -
  - but WITHOUT ANY WARRANTY; without even the implied warranty of           -
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            -
  - GNU Lesser General Public License for more details.                      -
  -                                                                          -
  - You should have received a copy of the GNU Lesser General Public License -
  - along with RAMvader.  If not, see <http://www.gnu.org/licenses/>.        -
  -->
<Window x:Class="RAMvaderGUI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:RAMvaderGUI"
        xmlns:props="clr-namespace:RAMvaderGUI.Properties"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		xmlns:RAMvader="clr-namespace:RAMvader;assembly=RAMvader"
        mc:Ignorable="d"
        Title="{x:Static props:Resources.wndTitleMainWindow}" Width="710" Height="580"
		DataContext="{Binding RelativeSource={RelativeSource Self}}">
	<Window.Resources>
		<!-- Define objects that need to be instantiated for this window -->
		<local:IntGreaterThanConverter x:Key="greaterThanConverter" />
		<local:ProcessToStringConverter x:Key="processToStringConverter" />
		<local:IntPtrToStringConverter x:Key="intPtrToStringConverter" />
		<local:TypeToFriendlyNameConverter x:Key="typeToFriendlyNameConverter" />
		<local:GenericRAMvaderValuesConverter x:Key="genericRAMvaderValuesConverter" />

		<ObjectDataProvider x:Key="enumValuesEPointerSize" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
			<ObjectDataProvider.MethodParameters>
				<x:Type TypeName="RAMvader:EPointerSize" />
			</ObjectDataProvider.MethodParameters>
		</ObjectDataProvider>

		<ObjectDataProvider x:Key="enumValuesEEndianness" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
			<ObjectDataProvider.MethodParameters>
				<x:Type TypeName="RAMvader:EEndianness" />
			</ObjectDataProvider.MethodParameters>
		</ObjectDataProvider>

		<CollectionViewSource x:Key="collectionViewSourceRegisteredAddresses" Source="{Binding Path=AvailableLocalProcesses}" Filter="FilterProcessesList" />

		<!-- Define styles used in this dialog -->
		<Style TargetType="Grid">
			<Setter Property="Margin" Value="3" />
		</Style>

		<Style TargetType="GridSplitter">
			<Setter Property="VerticalAlignment" Value="Stretch" />
			<Setter Property="HorizontalAlignment" Value="Stretch" />
		</Style>

		<Style TargetType="Label">
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>

		<Style x:Key="buttonStyle" TargetType="Button">
			<Setter Property="Margin" Value="1,3" />
		</Style>

		<Style TargetType="ListBox">
			<Setter Property="Margin" Value="1,3" />
		</Style>

		<Style x:Key="textBoxStyle" TargetType="TextBox">
			<Setter Property="Margin" Value="1,3" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>

		<Style TargetType="TextBlock">
			<Setter Property="Margin" Value="1,3" />
		</Style>

		<Style TargetType="DataGrid">
			<Setter Property="Margin" Value="1,3" />
		</Style>

		<Style TargetType="ComboBox">
			<Setter Property="Margin" Value="1,3" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>

		<Style TargetType="CheckBox">
			<Setter Property="Margin" Value="1,3" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>

		<Style x:Key="styleVisibleOnAutomaticRefresh" TargetType="Control">
			<Setter Property="Margin" Value="1,3" />
			<Setter Property="Visibility" Value="Visible" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding ElementName=m_chkAutomaticRefresh,Path=IsChecked}" Value="False">
					<Setter Property="Visibility" Value="Collapsed" />
				</DataTrigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="styleInvisibleOnAutomaticRefresh" TargetType="Control">
			<Setter Property="Margin" Value="1,3" />
			<Setter Property="Visibility" Value="Visible" />
			<Style.Triggers>
				<DataTrigger Binding="{Binding ElementName=m_chkAutomaticRefresh,Path=IsChecked}" Value="True">
					<Setter Property="Visibility" Value="Collapsed" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
	</Window.Resources>
	<!-- Grid level 1 (main grid) -->
    <Grid>
		<!-- Row and column definitions -->
		<Grid.RowDefinitions>
			<RowDefinition Height="70*" MinHeight="5" />
			<RowDefinition Height="5" />
			<RowDefinition Height="30*" MinHeight="5" />
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*" />
		</Grid.ColumnDefinitions>

		<!-- Grid level 2 (top grid) -->
		<Grid>
			<!-- Row and column definitions -->
			<Grid.RowDefinitions>
				<RowDefinition Height="*" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition MinWidth="100" Width="30*" />
				<ColumnDefinition Width="5" />
				<ColumnDefinition MinWidth="100" Width="70*" />
			</Grid.ColumnDefinitions>

			
			<!-- Grid level 3 (top-left) -->
			<Grid Grid.Row="0" Grid.Column="0">
				<!-- Rows and columns definition -->
				<Grid.RowDefinitions>
					<RowDefinition Height="auto" />
					<RowDefinition Height="auto" />
					<RowDefinition Height="*" />
					<RowDefinition Height="auto" />
					<RowDefinition Height="auto" />
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="auto" />
				</Grid.ColumnDefinitions>

				<!-- Top-left grid controls -->
				<Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Content="{x:Static props:Resources.lblProcesses}" />

				<TextBox x:Name="m_txtFilterProcesses" Grid.Row="1" Grid.Column="0" ToolTip="{x:Static props:Resources.strToolTipTypeToFilter}" Margin="0,0,5,0" VerticalContentAlignment="Center" TextChanged="TextBoxProcessesFilterTextChanged" />
				<Button Grid.Row="1" Grid.Column="1" Content="X" Style="{StaticResource buttonStyle}" Click="ButtonClearProcessesFilterClick" VerticalAlignment="Stretch" Margin="0" Padding="4,1" />

				<ListBox Name="m_lstProcesses" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,2" ItemsSource="{Binding Source={StaticResource collectionViewSourceRegisteredAddresses}}">
					<ListBox.ItemTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding Converter={StaticResource processToStringConverter}}" />
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>

				<Button Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Content="{x:Static props:Resources.btRefresh}" Click="ButtonRefreshProcessesClick" />
				<Button Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Click="ButtonAttachDetachClick" Margin="0,2">
					<Button.Style>
						<Style TargetType="Button" BasedOn="{StaticResource buttonStyle}">
							<Setter Property="Content" Value="{x:Static props:Resources.btAttach}" />
							<Setter Property="IsEnabled">
								<Setter.Value>
									<Binding ElementName="m_lstProcesses" Path="SelectedIndex" Converter="{StaticResource greaterThanConverter}" FallbackValue="False">
										<Binding.ConverterParameter>
											<sys:Int32>-1</sys:Int32>
										</Binding.ConverterParameter>
									</Binding>
								</Setter.Value>
							</Setter>
							<Style.Triggers>
								<DataTrigger Binding="{Binding Path=TargetProcessIO.Attached}" Value="True">
									<Setter Property="Content" Value="{x:Static props:Resources.btDetach}" />
									<Setter Property="IsEnabled" Value="True" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</Button.Style>
				</Button>

			</Grid>
			
			<GridSplitter Grid.Row="0" Grid.Column="1" ResizeDirection="Columns" />

			<!-- Grid level 3 (top-right) -->
			<Grid Grid.Row="0" Grid.Column="2">
				<Grid.Resources>
					<!-- Styles for inside this grid only-->
					<Style TargetType="Label">
						<Setter Property="HorizontalAlignment" Value="Right" />
					</Style>

					<Style TargetType="CheckBox">
						<Setter Property="HorizontalAlignment" Value="Right" />
						<Setter Property="VerticalAlignment" Value="Center" />
					</Style>
				</Grid.Resources>
				
				
				
				<!-- Row and column definitions -->
				<Grid.RowDefinitions>
					<RowDefinition Height="auto" />
					<RowDefinition Height="auto" />
					<RowDefinition Height="auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="auto" />
					<ColumnDefinition Width="5" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="auto" />
				</Grid.ColumnDefinitions>
				
				<!-- Top-right controls -->
				<CheckBox Name="m_chkAutomaticRefresh" Grid.Row="0" Grid.Column="0" Content="{x:Static props:Resources.chkAutomaticRefresh}" Checked="CheckBoxAutomaticallyRefreshCheckedOrUnchecked" Unchecked="CheckBoxAutomaticallyRefreshCheckedOrUnchecked" IsChecked="True" />
				<Button Grid.Row="0" Grid.Column="2" Content="{x:Static props:Resources.btRefresh}" HorizontalAlignment="Left" Height="20" Margin="1.4,3,0,0" VerticalAlignment="Top" Click="ButtonRefreshRegisteredAddressesClick">
					<Button.Style>
						<Style BasedOn="{StaticResource styleInvisibleOnAutomaticRefresh}" TargetType="Button">
							<Setter Property="Visibility" Value="Visible" />
							<Style.Triggers>
								<DataTrigger Binding="{Binding ElementName=m_chkAutomaticRefresh,Path=IsChecked}" Value="True">
									<Setter Property="Visibility" Value="Collapsed" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</Button.Style>
				</Button>
				<Slider Grid.Row="0" Grid.Column="2" Style="{StaticResource styleVisibleOnAutomaticRefresh}" VerticalAlignment="Center" VerticalContentAlignment="Center" Value="500" Maximum="1000" Minimum="200" LargeChange="100" SmallChange="50" TickFrequency="50" TickPlacement="TopLeft" IsSnapToTickEnabled="True" ValueChanged="SliderRefreshTimeValueChanged" />
				<Label Grid.Row="0" Grid.Column="3" Style="{StaticResource styleVisibleOnAutomaticRefresh}" Content="{x:Static props:Resources.lblRefreshTime}" />

				<Label Grid.Row="1" Grid.Column="0" Content="{x:Static props:Resources.lblProcessEndianness}" />
				<ComboBox Grid.Row="1" Grid.Column="2" Grid.ColumnSpan="2" ItemsSource="{Binding Source={StaticResource enumValuesEEndianness}}" SelectedItem="{Binding Path=TargetProcessIO.TargetProcessEndianness,UpdateSourceTrigger=PropertyChanged}" />

				<Label Grid.Row="2" Grid.Column="0" Content="{x:Static props:Resources.lblProcessPointerSize}" />
				<ComboBox Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="2" ItemsSource="{Binding Source={StaticResource enumValuesEPointerSize}}" SelectedItem="{Binding Path=TargetProcessIO.TargetPointerSize,UpdateSourceTrigger=PropertyChanged}" />

				<DataGrid x:Name="m_dataGridAddresses" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="4" AutoGenerateColumns="False" ItemsSource="{Binding Path=RegisteredAddresses}" CellEditEnding="DataGridCellEditEnding" BeginningEdit="DataGridCellEditBeginning">
					<!-- Context menu -->
					<DataGrid.ContextMenu>
						<ContextMenu>
							<MenuItem Header="{x:Static props:Resources.mnuAddAddress}" Click="MenuItemAddAddress" />
							<MenuItem Header="{x:Static props:Resources.mnuDeleteAddress}" Click="MenuItemDeleteAddress">
								<MenuItem.Style>
									<Style TargetType="MenuItem">
										<Setter Property="IsEnabled">
											<Setter.Value>
												<Binding RelativeSource="{RelativeSource AncestorType=ContextMenu}" Path="PlacementTarget.SelectedIndex" Converter="{StaticResource greaterThanConverter}" FallbackValue="False">
													<Binding.ConverterParameter>
														<sys:Int32>-1</sys:Int32>
													</Binding.ConverterParameter>
												</Binding>
											</Setter.Value>
										</Setter>
									</Style>
								</MenuItem.Style>
							</MenuItem>
							<Separator />
							<MenuItem Header="{x:Static props:Resources.mnuRAMvaderTestTargetOptions}">
								<MenuItem Header="{x:Static props:Resources.mnuRAMvaderTestTargetAdd}" Click="MenuItemAddRAMvaderTestTargetAddresses" />
								<MenuItem Header="{x:Static props:Resources.mnuRAMvaderTestTargetFreeze}" Click="MenuItemFreezeRAMvaderTestTargetAddresses" />
							</MenuItem>
						</ContextMenu>
					</DataGrid.ContextMenu>
					
					<!-- Columns -->
					<DataGrid.Columns>
						<DataGridTextColumn Header="{x:Static props:Resources.colIdentifier}" Binding="{Binding Path=Identifier}" />
						<DataGridTextColumn Header="{x:Static props:Resources.colAddress}" Binding="{Binding Path=Address,Converter={StaticResource intPtrToStringConverter}}" />
						<DataGridTemplateColumn Header="{x:Static props:Resources.colType}">
							<DataGridTemplateColumn.CellTemplate>
								<DataTemplate>
									<ComboBox ItemsSource="{x:Static local:RAMvaderTestTargetData.ExpectedAddressesInputTypeOrder}" SelectedValue="{Binding Path=Type,UpdateSourceTrigger=PropertyChanged}">
										<ComboBox.ItemTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding Converter={StaticResource typeToFriendlyNameConverter}}" />
											</DataTemplate>
										</ComboBox.ItemTemplate>
									</ComboBox>
								</DataTemplate>
							</DataGridTemplateColumn.CellTemplate>
						</DataGridTemplateColumn>
						<DataGridTextColumn x:Name="m_registeredAddressesDataGridValueColumn" Header="{x:Static props:Resources.colValue}" Binding="{Binding Path=Value,Converter={StaticResource genericRAMvaderValuesConverter}}" />
						<DataGridCheckBoxColumn Header="{x:Static props:Resources.colFreeze}" Binding="{Binding Path=Freeze,UpdateSourceTrigger=PropertyChanged}" />
					</DataGrid.Columns>
				</DataGrid>
			</Grid>
		</Grid>
		
		<GridSplitter Grid.Row="1" Grid.Column="0" ResizeDirection="Rows" />
		
		<!-- Grid level 2 (bottom) -->
		<Grid Grid.Row="2" Grid.Column="0">
			<!-- Row and column definitions -->
			<Grid.RowDefinitions>
				<RowDefinition Height="auto" />
				<RowDefinition Height="*" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="70" />
				<ColumnDefinition Width="*" />
			</Grid.ColumnDefinitions>
			
			<!-- Bottom controls -->
			<Label Grid.Row="0" Grid.Column="0" Content="{x:Static props:Resources.lblConsole}" />
			<Button Grid.Row="1" Grid.Column="0" Style="{StaticResource buttonStyle}" Content="{x:Static props:Resources.btClear}" Click="ButtonClearConsoleClick" />
			<TextBox x:Name="m_txtConsole" Grid.Row="1" Grid.Column="1" Style="{StaticResource textBoxStyle}" IsReadOnly="True" CaretBrush="{x:Null}" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		</Grid>
	</Grid>
</Window>
